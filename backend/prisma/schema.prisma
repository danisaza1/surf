generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model dog {
  firstname String
  lastname  String
  location  String
  username  String
  email     String
  password  String
  createdAt DateTime? @db.Timestamp(6)

  @@ignore
}



model users {
  id                   Int       @id @default(autoincrement())
  prenom               String?   @db.VarChar(50)
  nom                  String?   @db.VarChar(50)
  location             String?   @db.VarChar(100)
  surf_level           String?   @db.VarChar(20)
  utilisateur          String    @unique @db.VarChar(50)
  email                String    @unique @db.VarChar(100)
  password             String    @db.VarChar(255)
  is_verified          Boolean?  @default(false)
  password_reset_token String?   @db.VarChar(255)
  created_at           DateTime? @default(now()) @db.Timestamp(6)
}
// USERS
model User {
  id                  Int           @id @default(autoincrement())
  email               String        @unique
  prenom              String?
  nom                 String?
  location            String?
  surf_level          String?
  username            String        @unique
  password            String
  is_verified         Boolean       @default(false)
  password_reset_token String?
  created_at          DateTime      @default(now())

  // Relaciones
  surf_spots          SurfSpot[]    @relation("UserSurfSpots")
  comments            Comment[]
  validations         Validation[]
}

// SURF SPOTS
model SurfSpot {
  id          Int      @id @default(autoincrement())
  name        String
  location    String?
  latitude    Float?
  longitude   Float?
  is_hotspot  Boolean  @default(false)
  created_by  Int?
  createdAt   DateTime @default(now())

  // Relaciones
  creator     User?    @relation("UserSurfSpots", fields: [created_by], references: [id], onDelete: SetNull)
  comments    Comment[]
}

// COMMENTS
model Comment {
  id       Int      @id @default(autoincrement())
  user_id  Int
  spot_id  Int
  content  String
  created_at DateTime @default(now())

  // Relaciones
  user     User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  spot     SurfSpot  @relation(fields: [spot_id], references: [id], onDelete: Cascade)
}

// VALIDATIONS
model Validation {
  id        Int      @id @default(autoincrement())
  user_id   Int
  token     String
  type      String   @db.VarChar(20)  // Validación CHECK se maneja en app
  expires_at DateTime
  used      Boolean  @default(false)

  // Relación
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}